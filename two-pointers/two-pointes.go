package twopointers

/*
   1. Suma Objetivo en Array Ordenado
   Dado un array de n칰meros enteros ordenado en orden ascendente y un n칰mero objetivo target, encuentra dos 칤ndices (1-based) de los n칰meros que suman target.

   Ejemplo:
   Input: nums = [2, 7, 11, 15], target = 9
   Output: [1, 2]
   Explicaci칩n: nums[1] + nums[2] = 2 + 7 = 9
   Restricciones:

   Debe usarse un enfoque de two-pointers.
   Solo hay una soluci칩n 칰nica.
   No puedes usar la misma posici칩n dos veces.
*/

func SumArrayHashMap(nums []int, target int) []int {
	visited := make(map[int]int)

	for i, num := range nums {
		complement := target - num
		if index, ok := visited[complement]; ok {
			return []int{index, i}
		}

		visited[num] = i
	}
	return nil
}

func SumArrayTwoPointers(nums []int, target int) []int {
	left, right := 0, len(nums)-1

	for left < right {
		sum := nums[left] + nums[right]
		if sum == target {
			return []int{left + 1, right + 1} // Devuelve en formato 1-based
		} else if sum < target {
			left++
		} else {
			right--
		}
	}

	return nil // No hay soluci칩n
}

/*
   2. Cuadrados de un Array Ordenado
   Dado un array de enteros nums ordenado de forma no decreciente (puede contener negativos), retorna un nuevo array con los cuadrados de cada n칰mero ordenados tambi칠n en orden no decreciente.

   Ejemplo:
   Input: nums = [-4, -1, 0, 3, 10]
   Output: [0, 1, 9, 16, 100]
   Restricciones:

   Usa two-pointers para resolver el problema en O(n).
   No puedes usar .sort() en la soluci칩n.

*/

func OrderCuadraticArray(nums []int) []int {
	n := len(nums)
	left, right := nums[0], n-1
	result := make([]int, n)
	index := n - 1

	for left <= right {
		leftSq := nums[left] * nums[left]
		rightSq := nums[right] * nums[right]

		if leftSq > rightSq {
			result[index] = leftSq
			left++
		} else {
			result[index] = rightSq
			right--
		}
		index--
	}

	return result
}

/*
       3. Eliminar Duplicados en un Array Ordenado (Medio)
   游늷 Descripci칩n:
   Dado un array ordenado nums, modifica el array in-place para que cada n칰mero aparezca solo una vez y devuelve la nueva longitud del array.

   游늷 Ejemplo:

   plaintext
   Copiar
   Editar
   Entrada: nums = [0,0,1,1,1,2,2,3,3,4]
   Salida: 5  // nums = [0,1,2,3,4,_,_,_,_,_]
   游늷 Pistas:

   Usa un puntero lento para sobrescribir valores repetidos.
   Un puntero r치pido recorre el array y copia valores 칰nicos en el puntero lento.

*/

/*
   4. Contenedor con M치s Agua (Dif칤cil)
   游늷 Descripci칩n:
   Dado un array height donde cada 칤ndice representa la altura de un contenedor, encuentra el 치rea m치xima de agua que se puede almacenar.

   游늷 Ejemplo:

   plaintext
   Copiar
   Editar
   Entrada: height = [1,8,6,2,5,4,8,3,7]
   Salida: 49
   游늷 Pistas:

   Usa dos punteros: uno al inicio y otro al final.
   Calcula el 치rea y mueve el puntero que tiene menor altura para intentar maximizar el 치rea.

*/
